Given a binary tree, determine if it is height-balanced.

Height-balanced binary tree  : is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Return 0 / 1 ( 0 for false, 1 for true ) for this problem

Example :

Input : 
          1
         / \
        2   3

Return : True or 1 

int height(TreeNode * root){
    if(root==NULL)
      return 0;
    int lh = height(root->left);
     int rh = height(root->right);
     return max(lh, rh)+1;
} 
bool bal(TreeNode * root){
    if(root==NULL){
        return true;
    }
//call bal func on left,right of root,and calculate height differences
    if(bal(root->left) && bal(root->right) && abs(height(root->left)-height(root->right))<=1){
        return true;
    }
    return false;
} 
int Solution::isBalanced(TreeNode* root) {
     return bal(root);
   }
