Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).
Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []

class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans; //2D vector to store node values levelwise
        if(root == NULL) return ans; 
        queue<TreeNode*> q; //create a queue 
        q.push(root); //begin by pushing root node in Q
        while(!q.empty()) {
            int size = q.size();//save current Q size and run loop 
            vector<int> level; //vector to store nodes at this level
            for(int i = 0;i<size;i++) {
        TreeNode *node = q.front(); //Create a temporary node structure,save Q front in it
                q.pop(); //pop the front element of Q
        if(node->left != NULL) q.push(node->left); //insert left and right of node if exists
                if(node->right != NULL) q.push(node->right); 
                level.push_back(node->val); //Push into your vector the temporary node
            }
            ans.push_back(level); 
        }
        return ans; }
};
