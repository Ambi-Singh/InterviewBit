/* Problem Description
Given a non-negative number represented as an array of digits, add 1 to the number ( increment the number represented by the digits ).
The digits are stored such that the most significant digit is at the head of the list */

vector<int> Solution::plusOne(vector<int> &digits) {
reverse(digits.begin(), digits.end());//reverse the original array before u begin the addition
            vector<int> ans;
            int carry = 1;
            for (int i = 0; i < digits.size(); i++) {
                int sum = digits[i] + carry;
                ans.push_back(sum%10);
                carry = sum / 10;
            }
            while (carry) {
                ans.push_back(carry%10);
                carry /= 10;
            }
            while (ans[ans.size() - 1] == 0 && ans.size() > 1) {
                ans.pop_back();
//if you have zeroes in the beginning of i/p array,pop them,eg:03765 should o/p 3766
            }
            reverse(ans.begin(), ans.end());//reverse before you print
            reverse(digits.begin(), digits.end());//revert original array back to its form
            return ans;
};

   
