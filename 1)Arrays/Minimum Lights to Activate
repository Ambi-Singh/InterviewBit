Problem Description
There is a corridor in a Jail which is N units long. Given an array A of size N. The ith index of this array is 0 if the light at ith position is faulty otherwise it is 1.
All the lights are of specific power B which if is placed at position X, it can light the corridor from [ X-B+1, X+B-1].
Initially all lights are off.
Return the minimum number of lights to be turned ON to light the whole corridor or -1 if the whole corridor cannot be lighted.

int Solution::solve(vector<int> &A, int B) {
    //Each bulb at position X can light up (B-1)bulbs before as well as after itself
    //if B=3,X=4,(B-1)i.e.2 bulbs will be lit before,after,including itself
    //positions (X-3+1,X+3-1) i.e.X-2,X+2 
    int i=0,count=0,n=A.size();
    while(i<n)
    {   
        int right=min(i+B-1,n-1);//Min condition To stop search after the last bulb
        int left=max(i-B+1,0);//Max condition To stop search before the first bulb
        //before first bulb,after last bulb check will generate errors(boundary case)
        bool bulbfound=false;
while(right>=left)//we need to check for bulbs in the (left,right)range,searching from right
//bcoz rightmost bulbs give an advantage of covering left as well as right side
        {
            if(A[right]==1)
            {
                bulbfound=true;//from right,if u find a 1,break out of loop
                break;
            }
            right--;//else keep looking for a 1 from right till left
        }
        if(!bulbfound)
        return -1;
        count++;
        i=right+B;//increment i to B positions from right,next window begins

    }
    return count;}
