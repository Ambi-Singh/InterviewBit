Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.

class Solution {
public:
    ListNode* middleNode(ListNode* head) { 
   //middle point is the (n/2+1)th node in the LL,(5/2)+1= 3rd node for eg:1,(6/2)+1 = 4th node for eg:2
   //Naive solution would be counting all nodes present in the LL,and then reaching out to the [(n/2)+1]th node everytime
   //Time Complexity would be O(N) + O(N/2) in this case,Hence we go to the tortoise method
   
   //TORTOISE METHOD 
        ListNode* slow=head;//slow,fast pointers begin with the head node
        ListNode*fast=head;
        while(fast!=NULL && fast->next!=NULL)
        {
            slow=slow->next;//move slow one step at a time,but fast by 2 steps at a time
            fast=fast->next->next;
        }
        return slow;
    }
};
//TORTOISE METHOD has O(N/2) time complexity,hence a better solution to this problem
