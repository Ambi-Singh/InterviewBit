Given a singly linked list, determine if its a palindrome. Return 1 or 0 denoting if its a palindrome or not, respectively.

Notes:

Expected solution is linear in time and constant in space.
For example,

List 1-->2-->1 is a palindrome.
List 1-->2-->3 is not a palindrome.

 ListNode* midpoint(ListNode *head)//to find middle node of LL
    {
        ListNode*slow=head;
        ListNode*fast=head;
        while(fast!=NULL && fast->next!=NULL)
        {slow=slow->next;
         fast=fast->next->next;
            
        }
        return slow;
    }
    ListNode* reverseLL(ListNode *head)//to reverse a LL
    {
        ListNode*currptr=head;
        ListNode*prevptr=NULL;
        ListNode*nextptr=NULL;
        while(currptr!=NULL)
        {
            nextptr=currptr->next;
            currptr->next=prevptr;
            prevptr=currptr;
            currptr=nextptr;
        }
        return prevptr;
    }
   
int Solution::lPalin(ListNode* head) {
   if(head==NULL || head->next==NULL)//check if head node or its next is null
            return 1;
        ListNode*midnode=midpoint(head);//Find the middle node 
    midnode=reverseLL(midnode);//Reverse the LL from middle node
if(head->val!=midnode->val)//return false if the middlenode->val(reveresed LL)!=head->val
                return 0;
        ListNode*temphead=midnode->next;//store the next node of middlenode in temphead
        midnode->next=NULL;//break LL after middle node
        head=head->next;//move head a pointer ahead,as we have already checked it with midnode
        while(temphead!=NULL && head!=NULL)//keep checking until temphead,head are not null
        {
            if(head->val!=temphead->val)
                return 0;
            head=head->next;
            temphead=temphead->next;
            
        }
      return 1;
}
