You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)

Output: 7 -> 0 -> 8

    342 + 465 = 807
Make sure there are no trailing zeros in the output list

So, 7 -> 0 -> 8 -> 0 is not a valid response even though the value is still 807.


ListNode* Solution::addTwoNumbers(ListNode* A, ListNode* B) {
    ListNode *dummy = new ListNode(0);//dummy node created,the beginning of our resultant LL
    ListNode *curr = dummy;
    int carry = 0;//initialize carry with 0 in the beginning
    
    while(A || B || carry)
    {
        int sum = (A ? A->val : 0) + (B ? B->val : 0) + carry;
        carry = sum/10;
        
        curr->next = new ListNode(sum%10);//store sum value in new created node
        curr = curr->next;
        
        A = A ? A->next : A;
        B = B ? B->next : B;
    }
    
    return dummy->next;

    
}
